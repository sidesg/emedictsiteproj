# Generated by Django 5.0.2 on 2024-02-27 14:17

from django.db import migrations
import re
import json
import polars as pl

def load_data(datapath: str = "emedict/migrations/data/gloss-sux.json") -> list[dict]:
    with open(datapath, "r", encoding="utf8") as infile:
        data = json.load(infile)["entries"]

    return data

def load_posmap(datapath: str) -> dict:
    df = pl.read_csv(datapath, columns=["epsd_abbr", "emepos_abbr"])

    return dict(zip(df['epsd_abbr'], df['emepos_abbr']))

def add_data(apps, schema_editor):
    Lemma = apps.get_model("emedict", "Lemma")
    LemmaOid = apps.get_model("emedict", "LemmaOid")
    LemmaDef = apps.get_model("emedict", "LemmaDef")
    Form = apps.get_model("emedict", "Form")
    FormType = apps.get_model("emedict", "FormType")
    Spelling = apps.get_model("emedict", "Spelling")
    Tag = apps.get_model("emedict", "Tag")
    Pos = apps.get_model("emedict", "Pos")

    #Create tags
    tagdata = pl.read_csv("emedict/migrations/data/tags.csv")
    for dftag in tagdata.iter_rows(named=True):
        new_tag = Tag(
            term=dftag["tag"],
            type=dftag["type"]
        )

        new_tag.save()

    # #Create POS
    posdata = pl.read_csv("emedict/migrations/data/pos_defs.csv")
    for dfpos in posdata.iter_rows(named=True):
        new_pos = Pos(
            abbr = dfpos["abbr"],
            term = dfpos["term"],
            type = dfpos["type"]
        )

        new_pos.save()

    # #Create FormTypes
    formtype = pl.read_csv("emedict/migrations/data/formtypes.csv")
    for ft in formtype["term"].to_list():
        newft = FormType(
            term=ft
        )
        newft.save()

    #Create Lemmata
    data = load_data()
    posmap = load_posmap("emedict/migrations/data/pos_map.csv")
    for l in data:
        oid = l.get('oid', "no oid")
        try:
            newl = Lemma(
                cf=l["cf"],
                pos=Pos.objects.get(abbr=posmap.get(l["pos"], "O"))
            )

            newl.save()

            newoid = LemmaOid(
                lemma=newl,
                oid=oid
            )
            newoid.save()
            
        except:
            print(f"Error {l['cf']}, {oid}: oid/cf/pos")

        try:
            if senses := l["senses"]:
                for sense in senses:
                    s = sense["mng"]
                    newd = LemmaDef(
                        lemma=newl,
                        definition=s
                    )
                    newd.save()
        except:
            print(f"Error {l['cf']}, {oid}: senses")
        
        try:
            newform = Form(
                lemma=newl,
                cf=l["cf"]
            )
            newform.save()
        except:
            print(f"Error {l['cf']} {oid}: form")

        try:
            for base in l["bases"]:
                b = base["n"]
                b = re.sub(r"%sux:", "", b) 

                newb = Spelling(
                    form=newform,
                    spelling_lat=b
                )

                newb.save()
        except:
            print(f"Error {l['cf']}, {oid}: bases")


class Migration(migrations.Migration):

    dependencies = [
        ('emedict', '0002_lemma_status_txtsource_abbr_txtsource_url_and_more'),
    ]

    operations = [
        migrations.RunPython(add_data),
    ]
